import heapq
class Node:
    def __init__(self, name, g=0, h=0):
        self.name = name\
        self.g = g
        self.h = h 
        self.f = g + h 
        self.parent = None  

    def __lt__(self, other):
        return self.f < other.f
def a_star(graph, start, goal, heuristics):
    open_list = []
    closed_list = set()
    start_node = Node(start, g=0, h=heuristics[start])
    heapq.heappush(open_list, start_node)
    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1] 
        closed_list.add(current_node.name)
        for neighbor, cost in graph[current_node.name]:
            if neighbor in closed_list:
                continue 
            g_cost = current_node.g + cost
            h_cost = heuristics[neighbor]
            neighbor_node = Node(neighbor, g=g_cost, h=h_cost)
            neighbor_node.parent = current_node
            if not any(neighbor_node.name == n.name and neighbor_node.f >= n.f for n in open_list):
                heapq.heappush(open_list, neighbor_node)
    return None 
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1)],
}
heuristics = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 0,
}
start_node = 'A'
goal_node = 'D'
path = a_star(graph, start_node, goal_node, heuristics)
print("Path from {} to {}:".format(start_node, goal_node))
print(" -> ".join(path) if path else "No path found")
